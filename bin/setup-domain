#!/bin/bash

# Function to update the hosts file for custom domain
setup_hosts_file() {
  local domain=$1
  local ip="127.0.0.1"
  # Remove http:// or https:// from domain if present
  domain=$(echo $domain | sed -e 's~^[^/]*//~~')
  if ! grep -q "$domain" /etc/hosts; then
    echo "$ip $domain" | sudo tee -a /etc/hosts > /dev/null
    echo "Custom domain $domain added to /etc/hosts"
  else
    echo "Custom domain $domain already exists in /etc/hosts"
  fi
}

# Function to create Nginx configuration file
create_nginx_config() {
  local domain=$1
  local nginx_conf_dir="docker/nginx/conf.d"
  local nginx_conf_file="$nginx_conf_dir/$domain.conf"
  
  # Ensure the Nginx configuration directory exists
  mkdir -p $nginx_conf_dir

  # Remove http:// or https:// from domain if present
  domain=$(echo $domain | sed -e 's~^[^/]*//~~')

  cat <<EOF > $nginx_conf_file
server {
    listen 80;
    server_name $domain;

    root /var/www/html/src/public;
    index index.php index.html index.htm;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }

    location ~ /\.ht {
        deny all;
    }
}
EOF

  echo "Nginx configuration for $domain created at $nginx_conf_file"
}

# Load environment variables from compose/.env if it exists
if [ -f compose/.env ]; then
  set -a
  source compose/.env
  set +a
fi

# Update the hosts file with the custom domain
setup_hosts_file "$APP_URL"

# Create Nginx configuration file for the custom domain
create_nginx_config "$APP_URL"

echo "Custom domain setup complete."